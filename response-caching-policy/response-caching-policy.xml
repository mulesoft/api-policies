<policy id="{{policyId}}" policyName="response-caching-policy" xmlns="http://www.mulesoft.org/schema/mule/policy" xmlns:mule="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd 
						http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd			
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
						http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd	
						http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
						http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd">
 
  <!-- Response Caching Policy --> 
  <!-- Allows caching responses using a strategy based on the specified MEL expression. -->

  <spring:beans>
    <spring:bean class="java.util.concurrent.locks.ReentrantLock" id="lock"/>	
	<spring:bean id="sn" name="Bean" class="org.mule.util.store.ManagedObjectStore">
            <spring:property name="storeName" value="sn"/>
        	<spring:property name="entryTTL" value="{{ ttl }}"/>
			<spring:property name="expirationInterval" value="{{ ttl }}"/>
			<spring:property name="maxEntries" value="-1"/>
        </spring:bean>
  </spring:beans>

  <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="cachedResponse">
      <mule:logger message="Policy {{ policyId }} offered cached response for key: #[flowVars['key']]" level="DEBUG" />	  
	  <mule:set-property propertyName="http.status" value="200"/>    
      <mule:set-payload value="#[app.registry['sn'].retrieve(key)]"/>
   </mule:processor-chain>
  
  <before>
    <mule:set-variable variableName="key" value="{{ key }}" />
	<!-- caching payload -->
	<mule:choice xmlns:mule="http://www.mulesoft.org/schema/mule/core">
      <mule:when expression="#[((flowVars['key'] != null) &amp;&amp; (key instanceof java.io.InputStream))]">				
		<mule:set-variable variableName="key" value="#[org.apache.commons.io.IOUtils.toString(key, 'UTF-8')]"/>		
		<mule:set-payload value="#[key]"/>
      </mule:when>
      <mule:otherwise>
        <mule:logger message="Key [#[message.getId()]] is not type java.io.InputStream" level="DEBUG"/>
      </mule:otherwise>
    </mule:choice>
	<!-- object store cannot process null -->
	<mule:expression-component><![CDATA[if (flowVars['key'] == null) flowVars['key'] = "";]]></mule:expression-component>
		
	<mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="cachedResponse">
	  <mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[!app.registry['sn'].contains(key)]" name="MELCachingFilter"/>
	</mule:message-filter>

	<mule:custom-transformer name="Object-to-inputstream" class="org.mule.transformer.simple.ObjectToInputStream" />
  </before>
  
  <after>  	 
  
	<mule:choice>
		<mule:when expression="#[payload instanceof org.mule.api.transport.OutputHandler]">                        
			<mule:custom-transformer class="org.mule.transformer.simple.ObjectToInputStream"/>
		</mule:when>
		<mule:otherwise>
			<mule:logger message="Response Payload [#[message.getId()]] is of not of type org.mule.api.transport.OutputHandler ..." level="DEBUG"/>
		</mule:otherwise>
	</mule:choice>			
	<mule:choice>
		<!-- Read payload if it is of InputStream datatype -->
		<mule:when expression="#[payload instanceof java.io.InputStream]">
			<mule:set-variable variableName="payloadBck" value="#[org.apache.commons.io.IOUtils.toString(payload, 'UTF-8')]" />
			<mule:expression-component><![CDATA[										
										app.registry['lock'].lock();
										if (!app.registry['sn'].contains(key))
											app.registry['sn'].store(key, payloadBck);
										app.registry['lock'].unlock();										
										]]>
			</mule:expression-component>				
			<mule:set-payload value="#[payloadBck]" />
			<mule:remove-variable variableName="payloadBck" />
		</mule:when>
		<mule:when expression="#[payload instanceof java.io.Serializable]">
			<mule:expression-component><![CDATA[										
										app.registry['lock'].lock();
										if (!app.registry['sn'].contains(key))
											app.registry['sn'].store(key, payload);
										app.registry['lock'].unlock();										
										]]>
			</mule:expression-component>				
		</mule:when>
		<!-- Should not happen -->
		<mule:otherwise>
			<mule:logger level="INFO" message="Could not cache a message: #[message.getId()] of #[message.getPayload().getClass()]"/>       	  
		</mule:otherwise>
	</mule:choice>	
	
	<mule:remove-variable variableName="key" />
  </after>
  	   	 
  <pointcut>		
	   <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
    </pointcut>

   
</policy>
